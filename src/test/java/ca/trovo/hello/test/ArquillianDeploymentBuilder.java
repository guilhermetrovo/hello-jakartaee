package ca.trovo.hello.test;

import java.io.File;
import java.util.Collection;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.jboss.shrinkwrap.api.Archive;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.exporter.ZipExporter;
import org.jboss.shrinkwrap.api.importer.ZipImporter;
import org.jboss.shrinkwrap.api.spec.WebArchive;


/**
 * Base class for all tests that are going to run in {@code Arquillian}.
 */
abstract class ArquillianDeploymentBuilder {

	/** The logger for this class. */
	private static final Logger LOGGER = Logger.getLogger(ArquillianDeploymentBuilder.class.getName());

	/** The default project path where the deployment file ({@code .war}) is expected to be. */
	protected static final String DEPLOYMENT_FILE_PATH = "./target/";





	/**
	 * Builds the {@code .war} file for tests that will run in {@code Arquillian}.
	 *
	 * @param deploymentFilePath
	 * 			The folder where the deployment file is, usually {@link #DEPLOYMENT_FILE_PATH}.
	 * @param deploymentfileName
	 * 			The name of the deployment file, usually the application's name.
	 * @param testClassPackages
	 * 			The {@code Java} packages containing the {@code jUnit} classes to include in the generated {@code test.war}.
	 * @param exportedTestWarOutput [optional]
	 * 			The {@link File} where the {@code test.war} will be written.
	 * 			Used only for debugging the test code generation.
	 *
	 * @return The {@code test.war} file to be used on {@code Arquillian} deployments.
	 *
	 * @throws NullPointerException
	 * 				When any of the non-optional parameters are {@code null}.
	 *
	 * @see #buildTestWar(File, Collection, File)
	 *
	 */
	public static Archive<?> buildTestWar(String deploymentFilePath, String deploymentfileName, Collection<String> testClassPackages, File exportedTestWarOutput) {
		return buildTestWar(new File(deploymentFilePath, deploymentfileName), testClassPackages, exportedTestWarOutput);
	}

	/**
	 * Builds the {@code .war} file for tests that will run in {@code Arquillian}.
	 *
	 * @param deploymentFile
	 * 			The application's deployment file that will be started in {@code Arquillian} for tests.
	 * @param testClassPackages
	 * 			The {@code Java} packages containing the {@code jUnit} classes to include in the generated {@code test.war}.
	 * @param exportedTestWarOutput [optional]
	 * 			The {@link File} where the {@code test.war} will be written.
	 * 			Used only for debugging the test code generation.
	 *
	 * @return The {@code test.war} file to be used on {@code Arquillian} deployments.
	 *
	 * @throws NullPointerException
	 * 				When any of the non-optional parameters are {@code null}.
	 *
	 * @see ShrinkWrap
	 * @see WebArchive
	 *
	 */
	public static Archive<?> buildTestWar(File deploymentFile, Collection<String> testClassPackages, File exportedTestWarOutput) {
		validateWarFile(deploymentFile);
    	validateTestClassPackages(testClassPackages);
    	validateExportedTestWarOutput(exportedTestWarOutput);

    	LOGGER.log(Level.INFO, "Building TEST .war for {0} using test class packages {1}",
				new Object[] { deploymentFile.getAbsolutePath(), testClassPackages.toString() });

        // Get the WAR file generated by Maven and import it for running tests against
        WebArchive war = ShrinkWrap.create(ZipImporter.class, deploymentFile.getName()).importFrom(deploymentFile).as(WebArchive.class);

        // Add the package containing the test classes
    	testClassPackages.forEach(war::addPackage);

        // Export the WAR file to examine it in case of problems:
        if (exportedTestWarOutput != null) {
        	LOGGER.log(Level.INFO, "Exporting TEST .war file at {0}", exportedTestWarOutput.getAbsolutePath());
        	war.as(ZipExporter.class).exportTo(exportedTestWarOutput, true);
        }

        return war;
    }

	/**
	 * Helper method that validates the file that will be deployed in {@code Arquillian} for tests is valid.
	 *
	 * @param warFile
	 * 			The deployment file to validate.
	 *
	 * @throws NullPointerException
	 * 				When the given {@code warFile} is {@code null}.
	 * @throws IllegalArgumentException
	 * 				When the given {@code warFile} does not exist or is not {@code .war}.
	 *
	 */
	private static void validateWarFile(File warFile) {
		Objects.requireNonNull(warFile, "Deployment file cannot be null.");

		if (!warFile.exists()) {
            throw new IllegalArgumentException("File " + warFile.getAbsolutePath() + " does not exist.");
        }

		if (warFile.isDirectory()) {
			throw new IllegalArgumentException(warFile.getAbsolutePath() + " is a directory.");
		}

		if (!warFile.getName().endsWith(".war")) {
			throw new IllegalArgumentException("File " + warFile.getAbsolutePath() + " is not a .war file.");
		}
	}

	/**
	 * Helper method that validates at least one test class package was sent.
	 *
	 * @param testClassPackages
	 * 			The test class packages that will be deployed in {@code Arquillian}.
	 *
	 * @throws NullPointerException
	 * 				When the given packages is {@code null}.
	 * @throws IllegalArgumentException
	 * 				When the given packages is {@code empty}.
	 *
	 */
	private static void validateTestClassPackages(Collection<String> testClassPackages) {
		Objects.requireNonNull(testClassPackages, "Test class packages cannot be null.");

		if (testClassPackages.isEmpty()) {
			throw new IllegalArgumentException("At least on test class package is required to build the test .war file.");
		}
	}

	/**
	 * Helper method that validates the file given to save the {@code jUnit} test {@code .war} file that will be executed in {@code Arquillian}.
	 * Since this is an optional parameter, {@code null} is a valid argument, but it may point to a file that does not exist yet.
	 *
	 * @param exportedTestWarOutput
	 * 			The {@link File} where the {@code test.war} will be written.
	 * 			Used only for debugging the test code generation.
	 *
	 * @throws IllegalArgumentException
	 * 				When the given {@code exportedTestWarOutput} is not a .war file.
	 *
	 */
	private static void validateExportedTestWarOutput(File exportedTestWarOutput) {
		// Optional parameter
		if (exportedTestWarOutput == null) {
			return;
		}

		if (exportedTestWarOutput.isDirectory()) {
			throw new IllegalArgumentException("Cannot export the test .war file because " + exportedTestWarOutput.getAbsolutePath() + " is a directory.");
		}

		if (!exportedTestWarOutput.getName().endsWith(".war")) {
			throw new IllegalArgumentException("File " + exportedTestWarOutput.getAbsolutePath() + " is not a .war file.");
		}

		/*if (exportedTestWarOutput.exists()) {
			throw new IllegalArgumentException("Cannot export the test .war file because " + exportedTestWarOutput.getAbsolutePath() + " already exists.");
		}*/
	}
}
